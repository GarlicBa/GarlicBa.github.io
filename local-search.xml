<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机概论</title>
    <link href="/2024/08/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%AE%BA/"/>
    <url>/2024/08/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机概论"><a href="#计算机概论" class="headerlink" title="计算机概论"></a>计算机概论</h1><ol><li><p>计算机硬件部分包括输入单元，主机部分，输出单元三部分。</p></li><li><p>主机主要部分为CPU与内存。CPU分为算数逻辑单元与控制单元，负责核心运算与判断。</p><blockquote><p>数据传输方向：输入单元–&gt;内存–&gt;CPU–&gt;内存–&gt;输出单元</p><p>即所有数据都要经过内存传输，内存容量加大，支持数据告诉缓存，可增大系统性能。</p><p><strong>内存不足，性能会很糟糕</strong></p></blockquote></li><li><p>即主要分为五部分：输入单元、输出单元、CPU内部的算数逻辑单元、控制单元与内存。</p></li></ol><hr><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><ol><li><p>CPU的位数指CPU一次数据读取的最大量。64位CPU代表CPU一次可以读写64bits这么多的数据。</p></li><li><p>不同的x86架构的CPU有什么差异呢？</p><blockquote><p>除了CPU的整体结构，还有的就是微指令集的不同。先进的微指令集可大幅度提高效率和性能。</p></blockquote></li></ol><hr><p><img src="/2024/08/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%AE%BA/1724332844966.png" alt="1724332844966"></p><p><em>各部分在人体中的映射</em></p><ol start="5"><li><p>内存是处理当下就要处理的数据，而硬盘充当备忘录，把不用的东西先存放起来，需要的时候再回忆取用。</p></li><li><p>CPU的运算速度常用 MHz 或者是 GHz 之类的单位。</p><blockquote><p>在网络传输方面，由于网络使用的是 bit 为单位，因此网络常使用的单位为 Mbps 是 Mbits per second，亦即是每秒多少<br>Mbit。</p></blockquote></li><li><p>CPU 的频率可衡量CPU性能。</p><blockquote><p>频率就是CPU每秒钟可以进行的工作次数。 所以频率越高表示这颗CPU单位时间内可以作更多的事情。</p></blockquote></li><li><p>GPU,一个3D加速芯片</p><blockquote><p>显卡的一些3D的运算早期是交给CPU去运行的，但是CPU并非完全针对这些3D来进行设计的，而且CPU平时已经非常忙碌了呢！ 所以后来显卡厂商直接在显卡上面嵌入一个3D加速的芯片，即为GPU.</p></blockquote></li><li><p>操作系统（OS）其实是一组程序， 这组程序的重点在于<strong>管理电脑的所有活动以及驱动系统中的所有硬件</strong>。</p></li><li><p>操作系统核心关键管控硬件与提供相关的能力。</p><blockquote><p>只有核心有提供的功能，你的电脑系统才能帮你完成！</p></blockquote></li><li><p><strong>操作系统起始就是核心与其提供的接口工具</strong> </p><p><strong>总结：上层应用通过接口控制核心 管理硬件</strong></p><p>电脑系统主要由硬件构成，操作系统的核心程序负责管理硬件。</p><blockquote><p>操作系统的核心层直接参考硬件规格写成。</p></blockquote><p>上头还需有应用程序的提供，使用者才能操作系统。所以除了核心程序，操作系统还会提供一整组开发接口（系统调用层）。</p><blockquote><ul><li><p>即工程师只需根据接口参数开发软件，软件就能在核心上头运行。</p></li><li><p>软件与核心关系很大，与硬件关系不大。硬件也与核心关系较大。</p></li></ul></blockquote></li></ol><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://wizardforcel.gitbooks.io/vbird-linux-basic-4e/content/index.html">鸟哥的linux私房菜</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异形：契约</title>
    <link href="/2024/08/21/%E5%BC%82%E5%BD%A2%EF%BC%9A%E5%A5%91%E7%BA%A6/"/>
    <url>/2024/08/21/%E5%BC%82%E5%BD%A2%EF%BC%9A%E5%A5%91%E7%BA%A6/</url>
    
    <content type="html"><![CDATA[<p><img src="/2024/08/21/%E5%BC%82%E5%BD%A2%EF%BC%9A%E5%A5%91%E7%BA%A6/1724254089136.png" alt="1724254089136"></p><p><img src="/2024/08/21/%E5%BC%82%E5%BD%A2%EF%BC%9A%E5%A5%91%E7%BA%A6/1724373156820.png" alt="1724373156820"></p><p><img src="/2024/08/21/%E5%BC%82%E5%BD%A2%EF%BC%9A%E5%A5%91%E7%BA%A6/1724380682845.png" alt="1724380682845"></p><p><img src="/2024/08/21/%E5%BC%82%E5%BD%A2%EF%BC%9A%E5%A5%91%E7%BA%A6/1724380827891.png" alt="1724380827891"></p><p><img src="/2024/08/21/%E5%BC%82%E5%BD%A2%EF%BC%9A%E5%A5%91%E7%BA%A6/1724380907758.png" alt="1724380907758"></p>]]></content>
    
    
    <categories>
      
      <category>影评</category>
      
    </categories>
    
    
    <tags>
      
      <tag>异形</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异形：普罗米修斯</title>
    <link href="/2024/08/21/%E5%BC%82%E5%BD%A2%EF%BC%9A%E6%99%AE%E7%BD%97%E7%B1%B3%E4%BF%AE%E6%96%AF/"/>
    <url>/2024/08/21/%E5%BC%82%E5%BD%A2%EF%BC%9A%E6%99%AE%E7%BD%97%E7%B1%B3%E4%BF%AE%E6%96%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="异形：普罗米修斯"><a href="#异形：普罗米修斯" class="headerlink" title="异形：普罗米修斯"></a>异形：普罗米修斯</h1><blockquote><p>豆瓣评分 7.6</p></blockquote><p>嗯，还是想看一下异形的其他作品。原来像这种夺命舰，普罗米修斯都是以飞船的名字命名的。</p><p>说结论把，这个电影比夺命舰好看。</p><h2 id="故事情节"><a href="#故事情节" class="headerlink" title="故事情节"></a>故事情节</h2><p>主角们根据考古结果来到新星球上寻找他们的祖先。找到了祖先，发现 <strong>祖先创造了他们，却要消灭他们</strong> 。他们拥有飞船，船上携带着大量异形寄生体，目的地是地球。主角团们从探索，发现，阻拦到逃生，最后只有女主和仿生人活了下来，继续寻找祖先的来历。</p><p>故事情节其实很简单，但是整个故事发生的场景很大，包括飞船和星球，所以情节发展空间大，而且贯穿其中的意想不到的剧情很有意思。</p><h2 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h2><ol><li>仿生人</li></ol><p>每部剧里的仿生人绝对都是非常关键的人物。这部电影中的仿生人尤为的突出。</p><p><strong>他做事的动机意图让人琢磨不透。</strong></p><p>他在服从命令的前提下有自己的私心。</p><p>作为仿生人，他绝对服从创造他的人给他的命令，这是代码写入的，所以他听老板的话。</p><p>但他有自己的私心，他并没有收到不能伤害人的命令，所以当他觉得周围人在蔑视嘲弄自己，就产生了报复心理，把寄生体掺在水里给男主喝，还在女主怀孕时万般阻拦。</p><p>可以说是这部电影的灵活人物，没他不行。</p><p>他的内心是复杂的，<strong>因为他的造物主们正在寻找他们自己的造物主</strong>，他的内心我洞察不了。</p><hr><ol start="2"><li>女主</li></ol><p>她机敏，勇敢，灵活，有毅力，有担当，识大局，活到了最后。</p><p>她是这项探索的始发起者，存活下来后选择继续寻找祖先的来历。</p><p>她明白造物主的飞船为何飞向地球，因此她宁愿牺牲自己也要阻拦飞船。</p><p><strong>忍痛破腹，取出异形体。</strong> 这段演的真的太好了，既能体现出女主的机智与毅力，也为后面的情节做铺贴，绝了。</p><hr><p><img src="/2024/08/21/%E5%BC%82%E5%BD%A2%EF%BC%9A%E6%99%AE%E7%BD%97%E7%B1%B3%E4%BF%AE%E6%96%AF/1724249214950.png" alt="1724249214950"></p><p><em>三位主角的合影</em></p><p><img src="/2024/08/21/%E5%BC%82%E5%BD%A2%EF%BC%9A%E6%99%AE%E7%BD%97%E7%B1%B3%E4%BF%AE%E6%96%AF/1724250441113.png" alt="1724250441113"></p><p><em>第一个死的队友总是落单的或者看着不靠谱的</em></p><p><img src="/2024/08/21/%E5%BC%82%E5%BD%A2%EF%BC%9A%E6%99%AE%E7%BD%97%E7%B1%B3%E4%BF%AE%E6%96%AF/1724253191891.png" alt="1724253191891"></p><p><em>飞船坠毁的结算画面</em></p><p><img src="/2024/08/21/%E5%BC%82%E5%BD%A2%EF%BC%9A%E6%99%AE%E7%BD%97%E7%B1%B3%E4%BF%AE%E6%96%AF/1724253771709.png" alt="1724253771709"></p><p><em>异形体和造物主结合而成的主角</em></p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>非常推荐的一部电影，总是让人意想不到的刺激。</p>]]></content>
    
    
    <categories>
      
      <category>影评</category>
      
    </categories>
    
    
    <tags>
      
      <tag>异形</tag>
      
      <tag>普罗米修斯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git教程</title>
    <link href="/2024/08/20/git%E6%95%99%E7%A8%8B/"/>
    <url>/2024/08/20/git%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="git的开发教程"><a href="#git的开发教程" class="headerlink" title="git的开发教程"></a>git的开发教程</h1><h2 id="什么是git"><a href="#什么是git" class="headerlink" title="什么是git"></a>什么是git</h2><p>git是一个 <strong>分布式版本控制系统</strong> ，其实我也不懂，反正只需明白 <strong>通过git的一系列指令使我们的项目开发更加方便，项目合作开发更加便利</strong>。github听过把，大名鼎鼎的 <strong>源代码托管平台</strong>，就是用git来管理他们的网站的。</p><blockquote><p>如果你以后从事编程开发，百分百绕不开git。如果你想去github上找点有意思的项目，也得了解了解git趴。</p><p>当然，git是课外需要学的，如果你不是计科专业这种科班专业，放心好了，课内是用不到git的😘</p></blockquote><hr><h2 id="学习git"><a href="#学习git" class="headerlink" title="学习git"></a>学习git</h2><p>这边推荐一个csdn教程把，看这一篇就够了。</p><p><a href="https://blog.csdn.net/bjbz_cxy/article/details/116703787?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172397335216800211588477%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=172397335216800211588477&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116703787-null-null.142%5Ev100%5Epc_search_result_base5&utm_term=git&spm=1018.2226.3001.4187">关于Git这一篇就够了</a></p><p>当然，官网也肯定可以学:<a href="https://git-scm.com/">git</a></p><hr><h2 id="思路问题整理"><a href="#思路问题整理" class="headerlink" title="思路问题整理"></a>思路问题整理</h2><p>虽然真正操作过程中要使用的语句只是那么几个，但我是真的没搞懂，以至于每次上传到github都卡壳（），卡好久。。</p><p><strong>是时候该真正搞懂了！！！</strong></p><p><img src="/2024/08/20/git%E6%95%99%E7%A8%8B/4982f69711dac4c20aa2ad8c5d79af24.gif" alt="img"></p><h3 id="1-一些语句到底是什么意思"><a href="#1-一些语句到底是什么意思" class="headerlink" title="1. 一些语句到底是什么意思"></a>1. 一些语句到底是什么意思</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git add .<br></code></pre></td></tr></table></figure><p>git add &lt;文件&gt;操作是把选中的文件,存放到git的缓存区。</p><blockquote><p>注意，后面commit的时候，提交的就是缓存区的内容。</p><p>如果git add test.c ，再修改test.c，再commit，提交的内容还是原来的内容，修改是无效的。</p></blockquote><p>而git add . 是将所有改动的文件提交到暂存区。 <em><strong>未改动的不存也不需要存，因为本地仓库一模一样有。</strong></em></p><blockquote><p>改动怎么理解？就是判断现在的文件内容和本地仓库文件内容是否一致。</p><p>增加文件✔ 修改文件 ✔ 删除文件呢？</p><p>tips：这里的修改，如果是把文件内的a改成b，是<strong>不需要手动解决冲突</strong>的，commit的结果全全按照我们修改后的，可以理解为将原文件覆盖掉。</p></blockquote><p><strong>删除文件：</strong></p><p><strong>原来有，现在没，那也是改动！！！</strong> 所以✔</p><blockquote><p>当我们在本地删除一个文件后，文件在物理意义上消失了，而后通过git add .命令，把<strong>删除</strong>这个操作储存在缓存区，我们在commit后，该文件就在本地仓库消失辣！！</p><p>但是文件的历史记录仍然可以在之前的提交中找到，除非进行了强制重置或删除了那些提交。</p></blockquote><p>所以，**<code>git add .</code>就是个万能公式，什么情况下都可以用！**</p><hr><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git status<br></code></pre></td></tr></table></figure><p>对比当前文件状态与本地仓库中的数据是否一样，是否发生改动。</p><hr><p>综上，经过万能的三步，本地仓库是可以与我们的项目统一的。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git status<br>git add .<br>git commit <span class="hljs-literal">-m</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr><p>然后就是 <strong>本地仓库与github远程仓库的连接</strong>了</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git remote add origin &lt;远程仓库链接&gt;<br></code></pre></td></tr></table></figure><p>origin代表远程仓库，就这么用就行</p><hr><p>然后用git push 推送到远程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git push <span class="hljs-literal">-u</span> origin master<br></code></pre></td></tr></table></figure><p>push表示将本地仓库与远程仓库进行<strong>合并</strong></p><p>-u：将本地仓库分支与远程仓库分支一起合并，就是说将master的分支也提交上去，这样你就可以在远程仓库上看到你在本地仓库的master中创建了多少分支，不加这个参数只将当前的master与远程的合并，没有分支的历史记录，也不能切换分支。<strong>就第一次push的时候用一次就行，后面可以去掉</strong> </p><p>以后用这个就行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git push origin master<br></code></pre></td></tr></table></figure><p>master表示提交本地master分支仓库。远程仓库也会因此创建一个master分支，因为创建远程仓库默认是main分支。</p><p>推送后，即可在远程仓库看到我们的项目~</p><hr><h4 id="合并是什么意思！！！"><a href="#合并是什么意思！！！" class="headerlink" title="合并是什么意思！！！"></a>合并是什么意思！！！</h4><ol><li><p>如果本地仓库多一个文件，就在远程新加一个。</p></li><li><p>如果本地仓库修改呢？</p><ul><li><p>在原来基础上添加内容，那么git会自动帮助我们合并结果。</p></li><li><p>在原来基础上把a改成b，需要 <strong>手动解决冲突</strong>！！！</p></li><li><p>在原来基础上删减掉一些东西呢？如果取交集的话，那不是还在吗?   答案是 <strong>不会！！</strong> 远程仓库会和本地仓库同步。</p></li></ul></li><li><p>如果本地仓库删除一个文件，同理可得，远程仓库会和本地仓库同步。即 <strong>远程仓库也会删除</strong></p></li></ol><p>总结一下，多了就用我们本地的，少了就遵循我们本地的删掉，修改了，那就需要手动解决冲突。</p><p>所以，只要注意  <strong>不是替换的情况下，可以直接推到远程仓库！！！</strong> </p><p>但更多的时候，我会是替换，所以需要 <strong>手动解决冲突</strong>。</p><hr><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git branch<br></code></pre></td></tr></table></figure><p>查看当前所有分支</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git branch &lt;分支名&gt;<br></code></pre></td></tr></table></figure><p>创建分支</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git checkout &lt;分支名&gt;<br></code></pre></td></tr></table></figure><p>切换分支</p><hr><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git merge<br></code></pre></td></tr></table></figure><p>切换到master，并合并其他分支。都是用master分支进行提交的。<strong>可以减少分支，瘦身嘛</strong></p><p>因为一个项目可能有多个人进行开发，分别负责各自部分，开发完毕后，会合并到总分支，并通过总分支进行提交，提交到远程仓库。</p><p><em>这里会有个新问题，当你在push到远程仓库时，其他伙伴可能先你一步，所有远程仓库和你现有的不同步，所以你需要<strong>git pull</strong>，这里就是后话了。后面会讲到。</em></p><blockquote><p>思考思考，我们从远程拉取master分支，我们又新建一个分支，并在这个分支开发，开发完毕后，进行合并，和上面讲的合并类似，可能需要手动解决冲突，解决后，再上传到本地仓库。再通过master分支push到远端。（因为本地已经合并过了，所以不需要把其他分支进行上传，所以也就不需要—u了，有没有绕清楚？嘻嘻）</p></blockquote><hr><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git pull<br></code></pre></td></tr></table></figure><p>上面有讲到，如果远程仓库有修改，push是会失效的，我们得先pull，拉取，然后再进行上传。具体在<code>3</code>中会考虑到。</p><hr><h3 id="2-如何手动解决冲突"><a href="#2-如何手动解决冲突" class="headerlink" title="2.如何手动解决冲突"></a>2.如何手动解决冲突</h3><ol><li><p><strong>检出冲突文件</strong>：首先，Git会在合并过程中识别出冲突的文件，并在终端中告诉你哪些文件存在冲突。</p></li><li><p><strong>打开冲突文件</strong>：打开显示冲突的文件，Git会在冲突区域插入特殊的标记，让你知道哪里存在问题。</p></li><li><p><strong>查看冲突标记</strong>：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">plaintext<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>// 你的本地更改<br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br>// 远程仓库的更改<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;remote-branch&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>编辑文件</strong>：决定你想要保留哪些更改。你可能需要保留一方的更改、结合双方的更改，或者完全重写冲突的部分。</p></li><li><p><strong>删除冲突标记</strong>：在编辑过程中，删除上述的Git冲突标记，确保文件中不再包含这些标记。</p></li><li><p><strong>保存文件</strong>：在解决了所有冲突并满意你的更改后，保存文件。</p><blockquote><p>注意解决冲突时，如果全部选择当前的代码，保存后，再次提交，就不会产生冲突，因为git已经记住了你的“决定”。</p><p>如果你推送解决冲突后的更改到远程仓库，而其他开发者拉取这些更改并再次合并，他们不会遇到同样的冲突，因为你已经解决了它。</p></blockquote></li><li><p><strong>添加到暂存区</strong>：使用<code>git add</code>命令将解决了冲突的文件添加到暂存区：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><br>git add &lt;解决冲突后的文件名&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>完成合并</strong>：一旦解决了所有冲突并且将更改的文件添加到暂存区，你可以继续完成合并过程，通过提交更改来结束合并操作：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><br>git commit <span class="hljs-literal">-m</span> <span class="hljs-string">&quot;解决合并冲突&quot;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>推送更改</strong>：解决完冲突并提交后，你可以将解决冲突后的更改推送到远程仓库：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><br>git push origin master<br></code></pre></td></tr></table></figure></li><li><p><strong>使用工具辅助</strong>：有些集成开发环境（IDE）或文本编辑器提供了图形界面来辅助解决合并冲突，这些工具可以更容易地比较和编辑冲突的文本。</p></li></ol><hr><h3 id="3-远程仓库修改了怎么办？"><a href="#3-远程仓库修改了怎么办？" class="headerlink" title="3.远程仓库修改了怎么办？"></a>3.远程仓库修改了怎么办？</h3><p>要先拉取pull。</p><p>git pull的原理就是把远程仓库的最新更改和你当前的本地仓库进行<strong>合并</strong>。</p><blockquote><p>如果你添加了一个md文件，pull一下，你的本地也会增加一个md文件，其他文件都保持不变</p><p>当然，也避免不了手动解决冲突问题</p><p>如果你在本地做了一些更改，并且这些更改不会与远程分支的更改冲突，<code>git pull</code>通常可以保留你的本地更改。</p></blockquote><hr><h3 id="4-建立分支是怎么个事"><a href="#4-建立分支是怎么个事" class="headerlink" title="4. 建立分支是怎么个事"></a>4. 建立分支是怎么个事</h3><ol><li>自己分支干的事，不会影响到其他分支。 其他分支不相信你doge，觉得你不靠谱😏</li><li>在分支上开发，可以让自己大胆尝试自己的想法，而不用担心影响整体代码哦。</li><li>在master开发和在分支开发并进行合并，结果是一样的呀。虽然更烦了，但是更推荐。</li></ol><h3 id="5-如果把-git删了怎么办"><a href="#5-如果把-git删了怎么办" class="headerlink" title="5. 如果把.git删了怎么办"></a>5. 如果把<code>.git</code>删了怎么办</h3><p>你的Git仓库的版本控制信息将会丢失，因为<code>.git</code>文件夹是存储版本控制信息的核心。</p><p>被删了，说明本地仓库没了，和远程仓库的连接也没了。</p><p>那就<code>init</code>一个新的<code>.git</code>,再建一个本地仓库，再把数据上传到本地仓库，再和远程仓库连接一下，不就恢复正常了嘛~</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>发现什么问题我会继续更新~ </p><p>善用gpt，你能得到你想要的答案的。嘻嘻</p>]]></content>
    
    
    <categories>
      
      <category>开发的基础技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客搭建</title>
    <link href="/2024/08/19/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/08/19/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo博客搭建"><a href="#hexo博客搭建" class="headerlink" title="hexo博客搭建"></a>hexo博客搭建</h1><h2 id="什么是hexo"><a href="#什么是hexo" class="headerlink" title="什么是hexo"></a>什么是hexo</h2><p> 一个快速、简洁且高效的博客框架，可选择网上各种开源的适合自己的<strong>themes</strong> ，极其方便地打造自己的个人blog网站。</p><p>而且可以一键部署到github和服务器上，让大家都能看到你的个人blog~</p><hr><h2 id="基本搭建流程"><a href="#基本搭建流程" class="headerlink" title="基本搭建流程"></a>基本搭建流程</h2><p>网上有很多资料  可去 <strong>google，github</strong> 上多找找。</p><p>这边推荐几个教程：都参考一下</p><ul><li><p><a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a> </p><blockquote><p>官方的东西，得仔细看，教的都教了</p></blockquote></li><li><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">csdn上的，GitHub Pages + Hexo搭建个人博客网站，史上最全教程</a></p></li><li><p><a href="https://dev.to/rabehasy/create-a-blog-in-nodejs-using-hexo-l9n">google上的，好教程</a></p></li><li><p><a href="https://tsglz.github.io/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/">我花神的blog教程！！！</a></p></li></ul><hr><h2 id="可能的问题解决"><a href="#可能的问题解决" class="headerlink" title="可能的问题解决"></a>可能的问题解决</h2><p>通过上面的几个教程，你基本可以完成搭建自己的blog网站，但是期间肯定会碰到很多的问题，我对我自己碰到的问题进行了总结：</p><h3 id="1-为什么需要hexo-asset-image-插件"><a href="#1-为什么需要hexo-asset-image-插件" class="headerlink" title="1. 为什么需要hexo-asset-image 插件"></a>1. 为什么需要<code>hexo-asset-image</code> 插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs power">pnpm install https://github.com/CodeFalling/hexo-asset-image --save<br></code></pre></td></tr></table></figure><p>为什么需要插件，在 md 文件中，我们使用的是相对路径，而 hexo 是通过将 md 文件变为 html 文件然后展示出来，而在 html 文件中，图片是以绝对路径进行展示的。</p><p>我们运用 hexo g 就是将 md 文件翻译成 html 文件，md 会转化成 public 目录下带有日期的 html 文件，而图片会同样生成在同一文件夹下。</p><blockquote><p>如果图片未出现，则可以尝试先 hexo clean,清除 Hexo 生成的静态文件和缓存(在更改主题或者插件时，还是建议先 clean 更新一下)</p></blockquote><p>如果未下载插件，直接 hexo s 运行，会看到博客的图片没有显示，查看源代码：<br><img src="/2024/08/19/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image.png" alt="alt text"></p><p>会发现和 md 文件中的一样：</p><p><img src="/2024/08/19/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-1.png" alt="alt text"></p><p>但是当前图片的绝对路径应该在：<br><img src="/2024/08/19/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-2.png"><br>路径错误当然加载不出来喽。</p><p>但是当我们下载<code>hexo-asset-image</code>插件时</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">pnpm install https://github.com/CodeFalling/hexo<span class="hljs-literal">-asset-image</span> <span class="hljs-literal">--save</span><br></code></pre></td></tr></table></figure><p>下完之后还是记得 clean 一下</p><p>再观察图片路径：</p><p><img src="/2024/08/19/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-3.png" alt=""></p><p>很明显发现，路径前面多了日期，切换到 public 目录下了。所以<br>路径转换就是该节最开始提到的插件的作用：<strong>根据 md 图片的相对路径，给出 html 中图片的绝对路径。</strong></p><hr><h3 id="2-用Typora写blog"><a href="#2-用Typora写blog" class="headerlink" title="2. 用Typora写blog"></a>2. 用Typora写blog</h3><ul><li><p>cmd窗口 <strong>hexo-blog根目录</strong> 下输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs po">hexo new 文件名<br></code></pre></td></tr></table></figure><p>那么会默认在_posts下，创建一个文件名.md，和一个文件名的文件夹（存放md用到的图片）</p></li><li><p>用Typora打开这个md文件，编写blog，文章除了图片以外都不会有问题。</p></li><li><p>图片是个大问题，很可能加载不出来</p><blockquote><p>既然图片资源放那里了，那肯定就是路径错误，可以按F12查看当前图片的路径，看看问题出在哪。</p></blockquote></li><li><p>Typora中的操作：</p><p>  <img src="/2024/08/19/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/2c3ef07687e826b18eeeac55394ee0ff.png" alt="img"></p></li></ul><p><img src="/2024/08/19/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/75eb191cb7cae107761492050508499e.png" alt="img"></p><p>如上图的操作，可以使得 <strong>每次复制照片到Typora中时，照片就默认存放在相应的同名文件夹中</strong> 而这文件夹在之前就刚好创建过。这时候，图片就可以顺利展示了呀~</p><p>参考文章如下：</p><ul><li><a href="https://blog.csdn.net/m0_43401436/article/details/107191688">hexo博客中插入图片失败——解决思路及个人最终解决办法</a></li><li><a href="https://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/">hexo中完美插入本地图片</a></li></ul><hr><h3 id="3-categories与tags的设置"><a href="#3-categories与tags的设置" class="headerlink" title="3. categories与tags的设置"></a>3. categories与tags的设置</h3><h4 id="categories"><a href="#categories" class="headerlink" title="categories"></a>categories</h4><p><img src="/2024/08/19/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1724069455159.png" alt="1724069455159"></p><blockquote><p>还得是我花神！😋</p></blockquote><h4 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h4><p><img src="/2024/08/19/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1724069526846.png" alt="1724069526846"></p><blockquote><p>这种形式即可😋</p><p>，号用英文的！！！不然会报错或者不生效喔</p></blockquote><hr><h2 id="宝贝补充"><a href="#宝贝补充" class="headerlink" title="宝贝补充"></a>宝贝补充</h2><ol><li><p>一个hexo同步插件 <code>hexo-browsersync</code> </p><p>在之前，我们需输入下面的代码，才能在刷新后的页面看到更新后的页面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs po">hexo clean<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>但是在安装插件后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs po">pnpm install hexo-browsersync --save<br></code></pre></td></tr></table></figure><p>我们在编写md文件完毕后，一保存，blog页面就能实时渲染，无需再重复繁琐的操作~</p><hr></li><li><p>themes宝库</p><p>我们可以选择各种各样适合自己的个性化hexo主题,下面有很多资源库：</p><ul><li><p><a href="https://statichunt.com/hexo-themes">超级无敌themes库！！！</a></p></li><li><p><a href="https://github.com/devjin0617/awesome-hexo-theme?tab=readme-ov-file">github中的资源宝库</a></p></li><li><p><a href="https://hexo.io/themes/">hexo官方网站提供的theme库</a></p></li></ul></li></ol><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97">Hexo Fluid 用户手册</a></li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>剩下的问题以后碰到再说~</p><p>我会实时更新的思密达😋</p><p>有遗漏的欢迎补充(ಥ _ ಥ)</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown 使用教程</title>
    <link href="/2024/08/19/Markdown_usage/"/>
    <url>/2024/08/19/Markdown_usage/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown使用教程"><a href="#Markdown使用教程" class="headerlink" title="Markdown使用教程"></a>Markdown使用教程</h1><h2 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown是什么？</h2><p>Markdown是一种轻量级标记语言，可以让我们用简单的标记符号来编写简洁清爽的文档，并且可以很方便的转换成其他格式，比如html，pdf等等，方便分享。这篇文章就是用markdown写的</p><h3 id="Markdown的优点"><a href="#Markdown的优点" class="headerlink" title="Markdown的优点"></a>Markdown的优点</h3><ol><li>不是编程语言，语法非常简单，只需要记住几个符号就可以开始编写文档。不需要花很多时间学，一小时就足够。</li><li>Markdown可以很方便地转换为HTML、PDF等格式，方便分享和发布。</li><li>用markdown写文档只是熟练度的问题，熟练之后，写文章超快，而且排版整洁美观，简洁清爽，比word好用多多。 （word用起来太烦了，反正我用不来word）</li><li>像语雀、印象笔记等大部分笔记软件都支持markdown语法，可以方便的将笔记转移到另一个笔记软件。像github等也支持markdown语法。</li><li>便于管理，不容易丢，只需对md文件进行copy保存，就能保证所有笔记的完整。</li></ol><h2 id="为什么推荐使用markdown？"><a href="#为什么推荐使用markdown？" class="headerlink" title="为什么推荐使用markdown？"></a>为什么推荐使用markdown？</h2><ol><li>markdown就是专门记笔记用的，可以这么理解。基本大型的笔记软件都支持markdown语法，像typora（一款超好用的笔记软件）</li><li>说实话，现在不用markdown会被<strong>歧视，看不起</strong>的，因为真的很普及。<blockquote><p>这篇文章是我边学markdown边写的，因为周围人都在用，所有我觉得我也得学学qaq</p></blockquote></li><li>不学也不行，因为周围人都在用，你看他们分享的资料全是markdown写的，要是纯看md文件，你看不懂qaq</li><li>markdown确实好用，写笔记快。我有朋友用markdown写完再上传到hexo做个人博客的，好厉害#QAQ   我也想试试</li></ol><h2 id="Markdown基本用法"><a href="#Markdown基本用法" class="headerlink" title="Markdown基本用法"></a>Markdown基本用法</h2><p>可以这么说，markdown就是让你写文档，写文章的时候脱离鼠标，全身心把注意力放在键盘上。</p><blockquote><p>再看基本语法前，不如先找个markdown编辑器，比如typora，边学边写。<br>建议先跳到下面用vscode写markdown部分，等安装完插件后，再在vscode上实践语法，可以边学边写。</p></blockquote><hr><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>就是多个#+空格（下用space指代） </p><p>几个#就是几级标题，比如：</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h3 id="段落换行"><a href="#段落换行" class="headerlink" title="段落换行"></a>段落换行</h3><p>直接enter即可<br>此外，空一行，或者多行渲染后的效果都是空一行。自己看着办</p><hr><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>强调分两种，一种是 <em>斜体</em>,一种是 <strong>粗体</strong>。当然还有 <em><strong>粗斜体</strong></em><br><em>斜体</em>  一个下划线或者*，习惯后者</p><h3 id="标题-1"><a href="#标题-1" class="headerlink" title="标题"></a>标题</h3><p>就是多个#+空格（下用space指代） </p><p>几个#就是几级标题，比如：</p><h3 id="三级标题-1"><a href="#三级标题-1" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题-1"><a href="#四级标题-1" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题-1"><a href="#五级标题-1" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题-1"><a href="#六级标题-1" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h3 id="段落换行-1"><a href="#段落换行-1" class="headerlink" title="段落换行"></a>段落换行</h3><p>直接enter即可</p><blockquote><p>但有时候没用，看编辑器的设定把</p></blockquote><p>此外，空一行，或者多行渲染后的效果都是空一行。自己看着办</p><hr><h3 id="强调-1"><a href="#强调-1" class="headerlink" title="强调"></a>强调</h3><p>强调分两种，一种是 <em>斜体</em>,一种是 <strong>粗体</strong>。当然还有 <em><strong>粗斜体</strong></em><br><em>斜体</em>  一个下划线或者<em>，习惯后者<br><strong>粗体</strong> 两个下划线或者</em>*</p><blockquote><p>注意：<br>斜体和粗体之间不能有空格，否则会渲染失败<br>*号前最好还是加个空格。</p></blockquote><hr><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>有序列表和无序列表，有序列表就是数字+点+空格，无序列表就是*+空格，或者-+空格，或者+空格。比如：</p><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><hr><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>有两种方法：</p><ol><li>把要用的图片放在和md一个文件夹下，然后直接写图片名即可，比如：<br> <code>![图片名称](imageFile.png)</code><blockquote><p>图片名称是指放在鼠标放在图片上显示的字样，imageFile.png是指图片的文件名，注意图片名和文件名要一致，否则会找不到图片。</p></blockquote></li></ol><p><img src="/2024/08/19/Markdown_usage/image.png" alt="小熊"><br><em>小熊</em></p><hr><ol start="2"><li>如果下载了<code>Paste Image</code>插件，直接复制图片，然后在文档中，按<kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>v</kbd>即可，会自动生成图片和图片链接。</li></ol><hr><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接可以连接到网上某个url网址，如果是下面这个语法：<br><code>[链接名称](url)</code></p><blockquote><p>链接名称是指鼠标放在链接上显示的字样，url是指链接的网址。</p></blockquote><p>例如我自己部分参考的markdown教程:<a href="https://www.limfx.pro/ReadArticle/57/yi-zhong-xie-zuo-de-xin-fang-fa">点击这里  </a>对应的视频: <a href="https://www.bilibili.com/video/BV1si4y1472o/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=4e40ac6a40164558bbf4820dbba66ebc">点击这里</a></p><p>此外，可以直接选中某个字，直接<kbd>ctrl</kbd>+<kbd>v</kbd>即可，会自动生成链接，例如：<br><img src="/2024/08/19/Markdown_usage/image-2.png" alt="alt text"></p><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>句子前加&gt;，比如：<br><code>&gt;这是一段引用</code></p><blockquote><p>这是一段引用</p></blockquote><hr><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块有两种，一种是单行代码，一种是多行代码。</p><ol><li><p>行内代码，用&#96;&#96;括起来即可，比如：<br><code>这是一段行内代码</code></p></li><li><p>多行代码，用三个&#96;括起来即可，比如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">这是一段多行代码<br>这是一段多行代码<br>这是一段多行代码<br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格用|分割，比如：<br><img src="/2024/08/19/Markdown_usage/image-3.png" alt="alt text"></p><table><thead><tr><th>姓名</th><th>年龄</th><th>性别</th></tr></thead><tbody><tr><td>张三</td><td>18</td><td>男</td></tr><tr><td>李四</td><td>19</td><td>女</td></tr><tr><td>王五</td><td>20</td><td>男</td></tr></tbody></table><hr><p>另外还有个简单的玩法：<a href="https://www.tablesgenerator.com/markdown_tables#">Markdown Tables Generator表格生抽器</a></p><p>在这里你可以把word，excel里面的表格直接粘贴到网页中，然后生成对应的整齐的Markdown表格：<br><img src="/2024/08/19/Markdown_usage/image-4.png" alt="alt text"></p><hr><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>用—即可</p><hr><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>用<code>~~删除线内容~~</code>即可，比如：<br><del>这是一段删除线</del></p><hr><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>用<code>&lt;u&gt;这是一段下划线&lt;/u&gt;</code>即可，比如：<br><u>下划线内容</u></p><hr><p>当然，markdown还有很多其他的功能，例如集成LateX语法的公式等等，需要可以自行了解。</p><p>如果想要了解公式，可参考<a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">这里</a></p><h2 id="在vscode中使用markdown"><a href="#在vscode中使用markdown" class="headerlink" title="在vscode中使用markdown"></a>在vscode中使用markdown</h2><h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><p>vscode大家应该都知道，是一款非常强大的 <strong>编辑器</strong> ，对的。它 <strong>不是编程平台</strong> ，所以不要怕，它支持markdown语法，并且有很多插件，可以让我们的markdown编写文档更方便。<br>vscode下载地址：<a href="https://code.visualstudio.com/">点击这里</a>  一路安装next即可</p><h3 id="安装相关的插件"><a href="#安装相关的插件" class="headerlink" title="安装相关的插件"></a>安装相关的插件</h3><p>运行vscode后，点击左侧的插件市场，搜索插件名称，点击安装，即可使用：<br><img src="/2024/08/19/Markdown_usage/image-6.png" alt="alt text"></p><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one">Markdown All in One</a> 方便在vsocde中编写markdown文档</li><li><a href="https://marketplace.visualstudio.com/items?itemName=yzane.markdown-pdf">Markdown PDF</a>可将markdown文档转换为pdf格式，便于看不懂markdown语法的人看</li><li><a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced">Markdown Preview Enhanced</a>  markdown预览插件，支持很多功能，比如数学公式，代码高亮等等</li><li><a href="https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image">Paste Image</a> 可支持将照片直接粘贴进markdown，极大简化编写。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker">Code Spell Checker</a> 检查拼写错误，防止打错字，主要检查的是英文单词</li></ol><h3 id="建立你的文库和第一篇文章"><a href="#建立你的文库和第一篇文章" class="headerlink" title="建立你的文库和第一篇文章"></a>建立你的文库和第一篇文章</h3><ol><li><p>首先你要建立一个 <strong>仓库</strong> 用来存放你所有的文章，这样你的文章就不会丢了。这个非常简单，在你的 <strong>硬盘上建个文件夹</strong> ，就结束了，对就这么简单，以后你所有的文章都放在这个文件夹中，要备份的话只要复制这个文件夹就可以复制你所有的文章了。</p></li><li><p>创建你的第一篇文章：</p><ol><li>用vscode打开这个文件夹（可以在资源管理器中选择打开文件夹），即 <strong>MYFLOGS</strong></li><li>在这个文件夹下面创建一个子文件夹，起个名字，即 <strong>MarkDown_Usage</strong></li><li>再这个文件夹下面创建一个文件，扩展名是md,即 <strong>usage.md</strong> 每一篇文章就是一个文件夹，用在该md文章的图片也放在该文件夹同一目录下：</li></ol></li></ol><p><img src="/2024/08/19/Markdown_usage/image-7.png" alt="alt text"></p><ol start="3"><li>写作时，记得经常保存，这是个好习惯，快捷键<code>ctrl</code>+<code>s</code> 当然系统也会提示</li></ol><h3 id="如何预览markdown格式"><a href="#如何预览markdown格式" class="headerlink" title="如何预览markdown格式"></a>如何预览markdown格式</h3><h4 id="可以打开分屏浏览："><a href="#可以打开分屏浏览：" class="headerlink" title="可以打开分屏浏览："></a>可以打开分屏浏览：</h4><p> <img src="/2024/08/19/Markdown_usage/image-8.png" alt="alt text"></p><h4 id="进入zen-mode模式，即沉浸式写代码"><a href="#进入zen-mode模式，即沉浸式写代码" class="headerlink" title="进入zen mode模式，即沉浸式写代码"></a>进入zen mode模式，即沉浸式写代码</h4><p>快捷键：<code>ctrl</code>+<code>k</code>,松开后，再按<code>z</code>,即可进入。两下<code>esc</code>即可退出<br><img src="/2024/08/19/Markdown_usage/image-9.png" alt="alt text"><br><em>非zen mode</em><br><img src="/2024/08/19/Markdown_usage/image-10.png" alt="alt text"><br><em>zen mode</em></p><h3 id="写完后生成目录"><a href="#写完后生成目录" class="headerlink" title="写完后生成目录"></a>写完后生成目录</h3><p>快捷键：<code>ctrl</code>+<code>shift</code>+<code>p</code>，输入<code>Create Table of Content</code>，回车即可生成目录:(不知道为什么有点丑陋)<br><img src="/2024/08/19/Markdown_usage/image-12.png" alt="alt text"><br><img src="/2024/08/19/Markdown_usage/image-13.png" alt="alt text"></p><hr><p>至此，你已经学会了如何在vscode中编写markdown文档了，是不是很简单呢？后续可转为pdf等等.</p><blockquote><p>当然，在vscode中编写的md文件，可以用其他任何支持markdown语法的编辑器打开，比如typora，所渲染的内容完全一样，笔记转移很方便~</p></blockquote><hr><h3 id="用typora写markdown"><a href="#用typora写markdown" class="headerlink" title="用typora写markdown"></a>用typora写markdown</h3><p>当然，如果你觉得vscode的markdown预览功能太弱，你可以试试typora，一款非常强大的markdown编辑器，不用像vscode那样写完要打开预览页面查看，而是 <strong>实时渲染</strong> ，真正实现所见即所得。<br>但是,现在已经 <strong>收费</strong> 了#QAQ (可以找找破解版qaq,富哥另说)</p><blockquote><p>大部分人都用typora来记笔记,但是当字数过多后,typora会发生卡顿(听说),但好评还是很高的.<br>想要学习的话,可以参考<a href="https://github.com/Sakiyary/Markdown-Typora-VSCode-Doc?tab=readme-ov-file">这里</a><br>还有<a href="https://www.bilibili.com/video/BV1hG411p7fX/?spm_id_from=333.337.top_right_bar_window_history.content.click&vd_source=4e40ac6a40164558bbf4820dbba66ebc">参考视频</a></p></blockquote><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此,基本的markdown写作你已经会了,要用好这些工具,提高自己的生产效率.<em><strong>加油打工人!</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>开发的基础技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>vscode</tag>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java方向免试题</title>
    <link href="/2024/08/19/%E9%99%A2%E7%A7%91%E5%8D%8F%E5%85%8D%E8%AF%95%E9%A2%98/"/>
    <url>/2024/08/19/%E9%99%A2%E7%A7%91%E5%8D%8F%E5%85%8D%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Java方向免试题"><a href="#Java方向免试题" class="headerlink" title="Java方向免试题"></a>Java方向免试题</h1><blockquote><h2 id="为青志联社团搭建一个简单的后端人员管理系统"><a href="#为青志联社团搭建一个简单的后端人员管理系统" class="headerlink" title="为青志联社团搭建一个简单的后端人员管理系统"></a>为青志联社团搭建一个简单的后端人员管理系统</h2></blockquote><hr><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>在社团百团大战之后，大一新生们都加入了自己喜欢的社团。小智和小爽都加入了青志联（一个志愿社团的名称🤤安利一波）。一天，部长把他们叫到跟前，说青志联成员人数过多，临时需要一个简易的后端人员管理系统进行人员管理，想要他们俩负责系统的开发， <strong>至此，他们俩的帕鲁生涯开始了</strong> 。</p><p>具体功能主要包括：</p><ol><li><strong>注册、登录、忘记密码并修改</strong> </li><li><strong>个人信息查看与编辑，添加、修改、删除成员信息</strong></li></ol><blockquote><p>两个任务都需结合<strong>数据库（Mysql）</strong>进行设计。</p><p>开发的就是部长的管理系统，即系统有包括<strong>新增、编辑、删除成员信息</strong> 在内等的功能。</p></blockquote><hr><h2 id="二、具体功能实现"><a href="#二、具体功能实现" class="headerlink" title="二、具体功能实现"></a>二、具体功能实现</h2><h3 id="（1）注册登录功能实现"><a href="#（1）注册登录功能实现" class="headerlink" title="（1）注册登录功能实现"></a>（1）注册登录功能实现</h3><p>小智擅长前端页面编写，选择开发注册登录功能。开发基本要求如下：</p><h4 id="1-注册页面"><a href="#1-注册页面" class="headerlink" title="1.注册页面"></a>1.注册页面</h4><img src="/2024/08/19/%E9%99%A2%E7%A7%91%E5%8D%8F%E5%85%8D%E8%AF%95%E9%A2%98/1724033488562.png" width="500px"><h5 id="页面需求："><a href="#页面需求：" class="headerlink" title="页面需求："></a>页面需求：</h5><p>前端编写一个注册界面，不需要这么精致（<strong>盒子，按钮齐全，功能逻辑可实现，布局合理即可</strong> ）</p><p>有 <strong>账号，密码输入框</strong> ， <strong>注册、登录按钮即可</strong>  二次输入密码与注册部门可以不需要。</p><blockquote><p>如果能实现二次输入密码进行密码校验，更好了，可加分</p></blockquote><hr><h5 id="功能逻辑："><a href="#功能逻辑：" class="headerlink" title="功能逻辑："></a>功能逻辑：</h5><p>主要就是 <strong>数据的校验、数据库的插入、页面跳转</strong> </p><ul><li>输入框不能为空，为空的话，框下会有提示。 </li><li>账号不能重复注册，需要查询数据库校验，若账号已存在，则框下会有<code>账号已存在</code>的提示。</li><li>点击注册按钮，跳转到登录页面，数据库中有成员信息插入，并可在登录界面进行登录。</li><li>点击<code>请登录</code> 按钮，可跳转到登录页面。</li></ul><blockquote><p>有二次输入密码校验，可加分</p></blockquote><hr><h4 id="2-登录页面"><a href="#2-登录页面" class="headerlink" title="2. 登录页面"></a>2. 登录页面</h4><img src="/2024/08/19/%E9%99%A2%E7%A7%91%E5%8D%8F%E5%85%8D%E8%AF%95%E9%A2%98/1724034872415.png" width="500px"><h5 id="页面需求：-1"><a href="#页面需求：-1" class="headerlink" title="页面需求："></a>页面需求：</h5><p>和注册页面基本要求类似。</p><p>有 <strong>账号、密码输入框</strong> ，<strong>登录、注册、忘记密码按钮</strong>  验证码模块不需要，有当然更好。</p><hr><h5 id="功能逻辑：-1"><a href="#功能逻辑：-1" class="headerlink" title="功能逻辑："></a>功能逻辑：</h5><p>主要就是 <strong>数据查询与校验、密码修改、页面跳转</strong> </p><ul><li><p>输入框不能为空，为空的话，框下会有提示。</p></li><li><p>输入账号密码，会自动通过后端到数据库进行人员查询与校验，若输入错误，框下会有提示。</p></li><li><p>登录按钮无功能要求，放一个意思一下就行。</p></li><li><p>点击<code>请注册</code> 按钮，会跳转到<strong>注册页面</strong> 。</p></li><li><p>点击<code>忘记密码</code>按钮，会跳转到<strong>修改密码页面</strong> ，输入<strong>账号与手机号</strong> ，通过<strong>后端数据库校验</strong> 后，后端默认修改对应账户密码为<strong>123</strong> ,如下图：</p><blockquote><p>数据库中的密码改为123才算修改成功</p></blockquote><img src="/2024/08/19/%E9%99%A2%E7%A7%91%E5%8D%8F%E5%85%8D%E8%AF%95%E9%A2%98/1724035413428.png" width="500px"></li></ul><hr><p>至此，小智的任务已经全部完成了。</p><h4 id="3-tips"><a href="#3-tips" class="headerlink" title="3.tips"></a>3.tips</h4><ul><li><p>校验功能可能有点难实现，可以 <strong>先不做</strong> ，会扣点分。</p></li><li><p>但是 <strong>页面跳转，注册的数据插入，密码的修改</strong> 必须实现，有关<strong>数据校验的数据查询功能</strong> ，前端可能难实现，可以不用实现，但需向我们讲讲<strong>数据查询</strong> 的思路。</p></li><li><p>数据校验结果当然也可以不用在框下方显示，写程序跳出一个错误界面也可以喔#QAQ</p></li></ul><hr><h3 id="（2）后端管理系统基本功能实现"><a href="#（2）后端管理系统基本功能实现" class="headerlink" title="（2）后端管理系统基本功能实现"></a>（2）后端管理系统基本功能实现</h3><p>小爽抢不过小智，只能选剩下来的了。开发基本要求如下：</p><h4 id="1-成员信息展示"><a href="#1-成员信息展示" class="headerlink" title="1.成员信息展示"></a>1.成员信息展示</h4><img src="/2024/08/19/%E9%99%A2%E7%A7%91%E5%8D%8F%E5%85%8D%E8%AF%95%E9%A2%98/1724037155294.png" width="500px"><h5 id="页面需求：-2"><a href="#页面需求：-2" class="headerlink" title="页面需求："></a>页面需求：</h5><p>编写一个系统界面，不需要这么精致（<strong>盒子，按钮齐全，功能逻辑可实现，布局合理即可</strong> ）上面为参考模板。</p><blockquote><p>tips：用三个盒子包住即可</p></blockquote><p><code>1号框</code> 处的大标题可以不用，只需右侧的账号名称即可。</p><p><code>2号框</code> 处按键都可简化不要，留一个<code>新增</code> 按钮即可。</p><p><code>3号框</code> 处为主体展示页面，只需展示数据库中 <strong>所有成员基本信息</strong>  即可，只需包括 <strong>账号</strong>、<strong>电话</strong> 信息即可。右侧有 <code>编辑</code> <code>删除</code> 按钮即可。其他，包括分页功能都不需要。</p><hr><h5 id="功能逻辑：-2"><a href="#功能逻辑：-2" class="headerlink" title="功能逻辑："></a>功能逻辑：</h5><p>主要就是 <strong>数据的增删改查、页面跳转</strong> </p><ul><li><p>页面需要自动通过接口通过后端获取所有成员信息，并渲染到前端页面进行展示，信息必须包括 <strong>账号和密码</strong>，其他信息可以自己选择添加。</p></li><li><p>点击右侧 <code>编辑</code> 按钮，可跳转到新的编辑页面，编辑页面默认展示对应账号信息，并可供修改。参考如下图：</p><ul><li>点击<code>修改</code> 按钮，可对数据库中的数据进行更新,并跳转回<code>系统展示页面</code> </li><li>点击 <code>取消</code>按钮 ，可返回 <code>系统展示页面</code>。</li></ul><img src="/2024/08/19/%E9%99%A2%E7%A7%91%E5%8D%8F%E5%85%8D%E8%AF%95%E9%A2%98/1724039976708.png" width="400px"></li><li><p>点击右侧 <code>删除</code> 按钮，可跳转到删除确认页面。</p><blockquote><p>两个按钮即可</p></blockquote><ul><li>点击<code>删除</code> 按钮，可对数据库中的数据进行删除，并跳转回<code>系统展示页面</code> 。</li><li>点击 <code>取消</code>按钮 ，可返回 <code>系统展示页面</code>。</li></ul></li><li><p>点击<code>2号框</code> 中的 <code>新增</code> 按钮，可跳转到新增页面，可参考下图：</p><ul><li><p>数据默认为空，需填写。</p></li><li><p>点击<code>添加</code> 按钮，可在数据库中插入新数据，并跳转回<code>系统展示页面</code> 。</p></li><li><p>点击 <code>取消</code>按钮 ，可返回 <code>系统展示页面</code>。</p><img src="/2024/08/19/%E9%99%A2%E7%A7%91%E5%8D%8F%E5%85%8D%E8%AF%95%E9%A2%98/1724041377591.png" width="400px"></li></ul></li><li><p><code>1号框</code> 右上角的账号按钮，可以动态显示当前登录账号的名称。并可实现点击跳转到 <code>个人信息页面</code> 。</p></li></ul><hr><h4 id="2-个人信息查询与修改"><a href="#2-个人信息查询与修改" class="headerlink" title="2.个人信息查询与修改"></a>2.个人信息查询与修改</h4><p>逻辑很简单，点击<code>系统展示页面</code>右上角的账号，可跳转到<code>个人信息页面</code>。</p><img src="/2024/08/19/%E9%99%A2%E7%A7%91%E5%8D%8F%E5%85%8D%E8%AF%95%E9%A2%98/1724038929157.png" width="500px"><h5 id="页面需求：-3"><a href="#页面需求：-3" class="headerlink" title="页面需求："></a>页面需求：</h5><p>页面默认展示自己的 <strong>账号、电话号码、密码</strong> 即可，有 <code>保存</code> <code>离开</code> 按钮 即可，参考页面如上</p><blockquote><p>页面只是作为参考，具体结果可自行发挥，对美观无要求。</p></blockquote><hr><h5 id="功能逻辑：-3"><a href="#功能逻辑：-3" class="headerlink" title="功能逻辑："></a>功能逻辑：</h5><p>主要就是 <strong>数据的查询与展示、数据的编辑更新、页面跳转</strong> </p><ul><li>个人页面需展示个人账户对应的信息。</li><li>个人信息可支持修改，点击 <code>保存</code> 按钮，可实现数据库中数据的更新。</li><li>点击 <code>离开</code> 按钮 ，可跳转回<code>系统展示页面</code>。</li></ul><hr><p>至此，小爽的任务已经全部完成了。</p><h4 id="3-tips-1"><a href="#3-tips-1" class="headerlink" title="3.tips"></a>3.tips</h4><ul><li>涉及到 <code>系统展示页面</code> 的增删改查功能，数据都会发生更新，那么页面数据的展示也应该<strong>随着发生更新</strong>。</li><li>理论上所有和输入框相关的，都应该有校验功能 <em>（校验输入非空等等）</em>，但小爽的工作量稍大，<strong>不要求</strong>。</li></ul><hr><h2 id="三、数据库搭建"><a href="#三、数据库搭建" class="headerlink" title="三、数据库搭建"></a>三、数据库搭建</h2><p>基于mysql数据库开发。</p><p>你需要添加一个数据库表格（3列）来储存<strong>账号、密码、电话号码</strong>。</p><p>进行增加、删除、修改、查询操作时，你都需要通过数据库相关语法与数据库进行交互。</p><hr><h2 id="四、温馨提示"><a href="#四、温馨提示" class="headerlink" title="四、温馨提示"></a>四、温馨提示</h2><ol><li><p>你只需选择完成小智或者小爽 <strong>其中一个人的任务</strong> 即可。（能两个都完成当然更好思密达😋</p></li><li><p>有些效果确实很难，不可能全部都实现。所以我们布置细分了很多功能，可以完成自己能做的功能，就很</p><p><strong>可以了！！！</strong> </p><blockquote><ul><li>主要考察的就是 <strong>增删改查和页面跳转</strong> 哦！</li><li>增删改查是一通百通的哦，理解了一个，其他功能也就自然而然会了。而如果你能实现一个，恭喜你，你已经打败99%的大一新生了思密达😋</li><li>完成了部分就可以来和我们交流了喔 不要怕 学长很亲和的 嘻嘻</li></ul></blockquote></li><li><p>后端管理系统其实是个很传统的项目，网上教程其实非常多，可以自己寻找教程学习。免试题并没有你想象的那么难喔😍😘 </p></li><li><p>网上现成资料多，但<strong>不要不动脑筋照搬哦</strong>，注重的是方法理解掌握，我们也会问你们实现原理的喔~</p></li><li><p>像这些登录注册页面的，网上也有很多现成的，我们不反对直接取用，但我们更建议自己手搓一个，增加熟练度。</p></li><li><p>你也可以参考很多快速搭建网站的 <strong>组件</strong> ，提高效率，比如 <a href="https://element.eleme.io/#/zh-CN">element-ui</a> ,当然你得提前学学 <strong>vue</strong>或者<strong>react</strong> 等前端框架。不管怎么说，多学不是坏事，以后都碰的到。</p></li><li><p>若题目有错误或者表述不清楚处，欢迎加我们QQ联系，蟹蟹~</p></li></ol><hr><h2 id="五、验收"><a href="#五、验收" class="headerlink" title="五、验收"></a>五、验收</h2><p>验收学长QQ   舒 2702996642      或者 梁 2238017911</p><p>验收地点未定，暂定开学后。</p><p>有其他安排或者问题，QQ联系我们喔。</p><hr>]]></content>
    
    
    <categories>
      
      <category>院科协授课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>springboot</tag>
      
      <tag>element-ui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异形：夺命舰</title>
    <link href="/2024/08/19/%E5%BC%82%E5%BD%A2%EF%BC%9A%E5%A4%BA%E5%91%BD%E8%88%B0/"/>
    <url>/2024/08/19/%E5%BC%82%E5%BD%A2%EF%BC%9A%E5%A4%BA%E5%91%BD%E8%88%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="异形：夺命舰"><a href="#异形：夺命舰" class="headerlink" title="异形：夺命舰"></a>异形：夺命舰</h1><blockquote><p>科幻、惊悚、恐怖     豆瓣评分 7.7 </p></blockquote><h2 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h2><p>对不起，女主那张脸真的长的太好看了思密达， <strong>太好看了！！</strong> <strong>太好看了！！</strong>  <strong>太好看了！！</strong> 重要的事情说三遍，而且她还有肌肉。还是环太平洋的主角😎这么俊的女人一眼爱上好吧。</p><p>但其实人物塑造方面，并没有什么很新颖的地方。</p><p>偷偷贴张照😏：</p><p><img src="/2024/08/19/%E5%BC%82%E5%BD%A2%EF%BC%9A%E5%A4%BA%E5%91%BD%E8%88%B0/1724070568747.png"></p><hr><h2 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h2><p>剧情设计也很常见，不新颖。当开头看到女主和仿生人弟弟出现，六人组队的时候，大概就猜出了剧情走向：基本团灭，仿生人为了亲情牺牲自己救下女主，女主最后活了下来。</p><blockquote><p>还以为幸存者会把异形带到星球上去额，那样有意思多了 但估计不好收场</p></blockquote><p>说真的，开头看六人上废弃舰船，我还想着两小时电影总不能全在舰上把，就那么点空间，六个人不知道死多少次了） <strong>还真扯了两小时</strong> 所以有限的空间，有限的角色。故事剧情肯定不多，主要就是 <strong>恐怖剧情与画面</strong> </p><blockquote><p> 但我胆子小）预判到有恐怖画面就闭眼，所以图了个 <strong>空刺激</strong> 看完除了爽以外就只剩女主的脸了#QAQ</p></blockquote><h3 id="故事就两条线："><a href="#故事就两条线：" class="headerlink" title="故事就两条线："></a>故事就两条线：</h3><ol><li>存活下来 </li><li>姐弟亲情）有但不多</li></ol><hr><h2 id="画面"><a href="#画面" class="headerlink" title="画面"></a>画面</h2><p>这是电影 <strong>突出的亮点</strong> 把，极致的视觉与听觉感官，很吓人，适合喜欢刺激，喜欢恐怖片的人看。</p><p>那些异形体，真的会突然出现，把我吓一跳（）</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一部 <strong>更适合在电影院看的</strong>  <strong>剧情传统的</strong>  <strong>少儿妇女不易观看的</strong> <strong>超级恐怖的</strong>  爽电影（爽文）。</p><p>总体还可以，可以看看，还是很爽的，但纯粹的吓人未免有点乏味。</p><p>知道这部电影的系列电影，有很多前作。我可能就不想去补看了。。。或许也都是这种恐怖画面😂</p>]]></content>
    
    
    <categories>
      
      <category>影评</category>
      
    </categories>
    
    
    <tags>
      
      <tag>异形</tag>
      
      <tag>女主角</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
